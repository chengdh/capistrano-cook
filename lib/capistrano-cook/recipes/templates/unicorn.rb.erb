# Help ensure your application will always spawn in the symlinked
# "current" directory that Capistrano sets up.
working_directory "<%= current_path %>"

pid "<%= unicorn_pid %>"

# Logging
stderr_path "<%= unicorn_log %>"
stdout_path "<%= unicorn_log %>"

# Listen on the Unix data socket to nginx.
listen "/tmp/unicorn.<%= application %>.sock"

worker_processes <%= unicorn_workers %>

# Restart any workers that haven't responded in 30 seconds (60 is default).
timeout 30

# Load rails+application into the master before forking workers
# for super-fast worker spawn times
preload_app true

# Reload gems properly
before_exec do |server|
  ENV["BUNDLE_GEMFILE"] = "#{current_path}/Gemfile"
end

before_fork do |server, worker|
  # The following is highly recomended for Rails + "preload_app true"
  # as there's no need for the master process to hold a connection
  defined?(ActiveRecord::Base) and ActiveRecord::Base.connection.disconnect!

  # The following is only recommended for memory/DB-constrained
  # installations. It is not needed if your system can house
  # twice as many worker_processes as you have configured.
  #
  # When sent a USR2, Unicorn will suffix its pidfile with .oldbin and
  # immediately start loading up a new version of itself (loaded with a new
  # version of our app). When this new Unicorn is completely loaded
  # it will begin spawning workers.
  #
  # The following allows a new master process to incrementally
  # phase out the old master process with SIGTTOU (decrements the number
  # of workers with one) to avoid a thundering herd (especially in
  # the "preload_app false" case) when doing a transparent upgrade. The
  # last worker spawned will then kill off the old master process with a SIGQUIT.
  old_pid = "#{server.config[:pid]}.oldbin"
  if old_pid != server.pid
    begin
      sig = (worker.nr + 1) >= server.worker_processes ? :QUIT : :TTOU
      Process.kill(sig, File.read(old_pid).to_i)
    rescue Errno::ENOENT, Errno::ESRCH
      # someone else did our job for us
    end
  end

  # Throttle the master from forking too quickly by sleeping.  Due
  # to the implementation of standard Unix signal handlers, this
  # helps (but does not completely) prevent identical, repeated signals
  # from being lost when the receiving process is busy.
  sleep 1
end

after_fork do |server, worker|
  # The following is *required* for Rails + "preload_app true",
  defined?(ActiveRecord::Base) and ActiveRecord::Base.establish_connection

  # Redis and Memcached would go here but their connections are established
  # on demand, so the master never opens a socket

  # Output worker pid to allow Monit to monitor the worker.
  child_pid = server.config[:pid].sub('.pid', ".#{worker.nr}.pid")
  system("echo #{Process.pid} > #{child_pid}")
end
